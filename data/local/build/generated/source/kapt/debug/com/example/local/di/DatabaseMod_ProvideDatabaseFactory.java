// Generated by Dagger (https://dagger.dev).
package com.example.local.di;

import android.content.Context;
import com.example.local.Database;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseMod_ProvideDatabaseFactory implements Factory<Database> {
  private final Provider<Context> contextProvider;

  public DatabaseMod_ProvideDatabaseFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public Database get() {
    return provideDatabase(contextProvider.get());
  }

  public static DatabaseMod_ProvideDatabaseFactory create(Provider<Context> contextProvider) {
    return new DatabaseMod_ProvideDatabaseFactory(contextProvider);
  }

  public static Database provideDatabase(Context context) {
    return Preconditions.checkNotNullFromProvides(DatabaseMod.INSTANCE.provideDatabase(context));
  }
}
